esphome:
  name: gasometer

esp32:
  board: nologo_esp32c3_super_mini
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  - platform: esphome

wifi:
  ssid: "BigPanda2"
  password: "5000637314746650"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Gaszaehler Fallback Hotspot"
    password: "RpWbDlos9Zsz"

captive_portal:

# Global variable to store total pulses
globals:
  - id: total_pulses
    type: int
    restore_value: true
    initial_value: '0'

# Binary sensor for pulse detection
binary_sensor:
  - platform: gpio
    id: internal_pulse_counter
    pin:
      number: GPIO4
      mode: INPUT_PULLUP
    name: "Live Pulse"
    filters:
      - delayed_on: 10ms
    on_press:
      then:
        - lambda: id(total_pulses) += 1;
        - light.turn_on: status_led
    on_release:
      then:
        - light.turn_off: status_led

# Sensors
sensor:
  # Gas consumption in m³
  - platform: template
    name: "Gas Consumption Total"
    device_class: gas
    unit_of_measurement: "m³"
    state_class: total_increasing
    icon: "mdi:fire"
    accuracy_decimals: 2
    lambda: |-
      return id(total_pulses) * 0.01;
    update_interval: 10s

  # Total pulses (for debugging)
  - platform: template
    name: "Gas Meter Total Pulses"
    unit_of_measurement: "pulses"
    state_class: total_increasing
    accuracy_decimals: 0
    lambda: |-
      return id(total_pulses);
    update_interval: 10s

  # WiFi Signal Strength
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s

# Reset button for pulse counter
button:
  - platform: template
    name: "Reset Gas Meter"
    on_press:
      - lambda: |-
          id(total_pulses) = 0;

# LED for visual feedback (using built-in LED on GPIO8)
light:
  - platform: binary
    id: status_led
    name: "Status LED"
    output: led_output

output:
  - platform: gpio
    id: led_output
    pin: GPIO8